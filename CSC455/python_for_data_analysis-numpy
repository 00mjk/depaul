''' 
Python for Data Analysis
Chapter 4 - NumPy
'''

import numpy as np

# ndarray: Nth dimensional array object which allows math operations on whole blocks of data
data1 = [6, 7.5, 8, 0, 1] # create a list
arr1 = np.array(data1) # create a array
arr1

# multi-dimensional array = list of equal length
data2 = [[1, 2, 3, 4], [5, 6, 7, 8]]
arr2 = np.array(data2)
arr2

# mathematical operations on the arrays performs over the entire ndarray constrary to the
#  original list which just get longer in size/width but remians the same
arr1 + arr1
arr1 * 2
arr2 + arr2
arr2 * 3 # scalar value
1 / arr1
arr2 - arr2

# every array has a shape (in the format of a tuple indicating dimension)
arr1.shape
arr2.shape

# every array has a dtype (object describing the data type)
arr1.dtype
arr2.dtype

# basic indexing and slicing
arr = np.arange(10)
arr[5]
arr[3:8]
arr[5:8] = 12 # the value 12 is propogated (or broadcasted) to the selection

# multi-dimensional array can have individual values accessed with a comma list of indicies
arr2[1]
arr2[1, 2]

# names
names = np.array(['Jasmine', 'Jenna', 'Fiona'])
names
names[2] + ' Daly-Dumas' # you can not apply this over the array

# data processing using arrays
points = np.arange(-5, 5, 0.01) # 1000 equally spaced points
xs, ys = np.meshgrid(points, points)
import matplotlib.pyplot as plt
z = np.sqrt(xs**2 + ys**2)
plt.imshow(z, cmap=plt.cm.gray); plt.colorbar(); plt.title("Image plot of $\sqrt{x^2 + y^2}$ for a grid of values")



