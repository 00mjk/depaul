source('~/Desktop/R-directory/secret.R', echo=TRUE)
source('~/Desktop/R-directory/secret.R', echo=TRUE)
source('~/Desktop/R-directory/secret.R', echo=TRUE)
source('~/Desktop/R-directory/secret.R', echo=TRUE)
source('~/Desktop/R-directory/secret.R', echo=TRUE)
source('~/Desktop/R-directory/secret.R', echo=TRUE)
source('~/Desktop/R-directory/secret.R', echo=TRUE)
source('~/Desktop/R-directory/secret.R', echo=TRUE)
source('~/Desktop/R-directory/secret.R', echo=TRUE)
shiny::runGist('https://gist.github.com/jasdumas/8fe37b19aea95fcee5be')
shiny::runGist('8fe37b19aea95fcee5be')
source('~/Desktop/R-directory/secret.R', echo=TRUE)
library(shiny)
runApp("GEO-AWS")
getwd()
shiny::runApp('~/Desktop/GEO-AWS')
# Authentication Log-on page with conditionalPanel
source('~/Desktop/R-directory/secret.R', echo=TRUE)
library(shiny)
runApp("GEO-AWS")
getwd()
shiny::runApp('~/Desktop/GEO-AWS')
summary(iris)
shiny::runApp('~/Desktop/GEO-AWS')
a <- ggplot(iris, aes(x=Sepal.Width, y=Petal.Length))
a + geom_point(position = 'jitter')
shiny::runApp('~/Desktop/GEO-AWS')
install.packages(c("curl", "httpuv", "shiny"))
shiny::runApp('~/Desktop/GEO-AWS')
shiny::runApp('~/Desktop/GEO-AWS')
?knit2html
shiny::runApp('~/Desktop/GEO-AWS')
shiny::runApp('~/Desktop/GEO-AWS')
shiny::runApp('~/Desktop/GEO-AWS')
getwd()
setwd("/Users/jasminedumas/Desktop/GEO-AWS")
getwd()
shiny::runApp('~/Desktop/GEO-AWS')
shiny::runApp('~/Desktop/GEO-AWS')
getwd()
setwd("/Users/jasminedumas/Desktop/R-directory")
getwd()
shiny::runApp('~/Desktop/GEO-AWS')
shiny::runApp('~/Desktop/GEO-AWS')
getwd()
setwd("/Users/jasminedumas/Desktop/GEO-AWS")
shiny::runApp('~/Desktop/GEO-AWS')
shiny::runApp('~/Desktop/GEO-AWS')
?fig.keep
?fig_chunk
?include
shiny::runApp('~/Desktop/GEO-AWS')
shiny::runApp('~/Desktop/GEO-AWS')
shiny::runApp('~/Desktop/GEO-AWS')
getwd()
library(knitr)
knitr()
knit()
knit(KM.png-1.png)
knit("KM.png-1.png")
getwd()
shiny::runApp('~/Desktop/GEO-AWS')
shiny::runApp()
shiny::runApp('~/Desktop/GEO-AWS')
shiny::runApp('~/Desktop/GEO-AWS')
a = "hi"
b = "bye"
c ="try"
x = data.frame(a, b, c)
View(x)
x = data.frame([a, b, c])
x = data.frame(c(a, b, c))
a = 1
b = 2
c = 3
d = 4
matrix(a, b, c, d)
matrix(a*a, a*b, a*c, a*d)
TIMES.TABLE.TIME <- function(){
a = "1*1=1     1*2=2     1*3=3     1*4=4"
b = "2*1=2     2*2=4     2*3=6     2*4=8"
c = "3*1=3     3*2=6     3*3=9     3*4=12"
d = "4*1=4     4*2=8     4*3=12   4*4=16"
table <- data.frame(c(a, b, c, d)) # length-wise view
View(table)
}
View(table)
source('~/Desktop/GEO-AWS/Untitled.R', echo=TRUE)
TIMES.TABLE.TIME()
q()
h <- ("hi")
h2 <- (hi)
h2 <- (3)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?a()
shiny::runApp()
paste("hi", "hrllo", sep='')
paste("hi", "hrllo", sep='', paste("there"))
?paste()
?paste0()
shiny::runApp()
shiny::runApp()
navbarPage()
navbarPage("GEO-AWS")
?navbarPage()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages(c("evaluate", "git2r"))
?paste0
~
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?aceEditor
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?"|"
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?radioButtons
shiny::runApp()
shiny::runApp()
?img
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?"|"
shiny::runApp()
shiny::runApp()
shiny::runApp()
?submitButton
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?cite
shiny::runApp()
shiny::runApp()
?aceEditor
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
getwd()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
TRUE
"TRUE"
typeof(TRUE)
typeof("TRUE")
shiny::runApp()
as.numeric("2")
typeof(as.numeric("2"))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?scrollX
shiny::runApp()
shiny::runApp()
shiny::runApp()
sqrt(729)
b = 1947.0
b
as.character(b)
?sapply
sapply(iris, class)
apply(iris, class)
lapply(iris, class)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?wellPanel
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?c()
View(colors())
colors()
shiny::runApp()
shiny::runApp()
date()
paste(date(), '.pdf', sep='')
install.package("rmarkdown")
install.packages("rmarkdown")
library(rmarkdown)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?updateAceEditor
shiny::runApp()
shiny::runApp()
shiny::runApp()
?"&"
a <- 'hi'
b <- 'hi'
identical(a, b)
c <- 'hello'
identical(a, c)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
identical(a, a)
identical(a, b)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
devtools::install_github('jasdumas/dumas')
devtools::install_github('jasdumas/dumas')
library(dumas)
groceryBill()
install.packages(c("foreign", "knitr", "nlme", "R6"))
sessionInfo()
install.packages("rstudioapi")
library(rstudioapi)
rstudioapi::isAvailable("0.99.149")
devtools::install_github("hadley/devtools")
library(devtools)
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library(devtools)
remove.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
has_devel()
if (!require("devtools"))
install.packages("devtools")
devtools::install_github("rstudio/shiny")
library(shiny)
shiny::runApp('~/Desktop/R-directory/issue8-29')
shiny::runApp('~/Desktop/R-directory/issue8-29')
shiny::runApp('~/Desktop/R-directory/issue8-29')
source('~/Desktop/R-directory/issue_undefinded.R', echo=TRUE)
shiny::runApp('~/Desktop/R-directory/issue8-29')
shiny::runApp('~/Desktop/R-directory/issue8-29')
source('~/Desktop/R-directory/issue_undefinded.R', echo=TRUE)
?setValues
shiny::runApp('~/Desktop/R-directory/issue8-29')
devtools::install_github('yihui/shiny@bugfix/selectize-selected')
library(shiny)
shiny::runApp('~/Desktop/R-directory/issue8-29')
source('~/Desktop/R-directory/issue_undefinded.R', echo=TRUE)
shiny::runApp('~/Desktop/R-directory/issue8-29')
getwd()
library(devtools)
devtools::create("GEO-AWS")
devtools::create("GEO_AWS")
devtools::create("GEOAWS")
sessionInfo()
devvtools::install_github("jasdumas/GEO-AWS")
devtools::install_github("jasdumas/GEO-AWS")
devtools::install_github("jasdumas/GEO-AWS")
library(shiny)
runApp("GEO-AWS")
getwd()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?formatBSModal
shiny::runApp()
shiny::runApp()
shiny::runApp()
a = "hi"
b ="bye"
c(a, b)
length(c(a, b))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
a
?toupper
shiny::runApp()
lung.surv <- survfit(Surv(time,status) ~ sex, data = lung)
b <- ggsurv(lung.surv)
b
b + scale_colour_discrete(name = 'Gene Expression')
b + ggtitle("HI there")
b + theme(plot.title = element_text(vjust = 0))
b + scale_colour_discrete(name = 'Expression', breaks = c(1,2), labels=c('Male', 'Female')))
b + scale_colour_discrete(name = 'Expression', breaks = c(1,2), labels=c('Male', 'Female'))
b
b + scale_colour_discrete(name = 'Expression')
b + scale_color_discrete(name = 'Expression')
b + labs(title = "hi")
a(a)
title(title)
shiny::runApp()
shiny::runApp()
toupper(a)
levels(toupper(a, b))
shiny::runApp()
navbarPage("GEO-AWS", id = "tabs", inverse = TRUE, position = "fixed-top",
collapsible = TRUE,
header = list(
############################################################
# GSE selection
############################################################
tags$style(type = "text/css",
".well{color: gray; background-color: black}"
),
div(style = "display:inline-block; width: 30%",
#                    uiOutput("GSE")
selectizeInput('GSE', label = NULL, choices = NULL,
options = list(placeholder = "Please enter a GSE accession number",
maxOptions = 1000)
)
#textInput("GSE",
#          HTML("<span style = \"color:red;font-weight:bold\">GEO Accession Number </span>"), "")
),
div(style = "display:inline-block; width: 30%",
actionButton("submitButton", "Submit")
),
## Hidden text box to indicate whether platform has been selected ##
#conditionalPanel(condition = "input.GSE == 'HEY'",
#                textOutput("displayPlatform")
# ),
div(style = "display:inline-block; width: 20%",
#uiOutput('platform', style = "display:inline-block; width:50%"),
selectizeInput('platform', label = NULL, choices = NULL,
options = list(placeholder = "Please select a platform",
maxOptions = 10)
)
),
div(style = "display:inline-block; width: 15%",
actionButton("PlatformInfoButton", "Platform Information")
),
shinyBS::bsModal("PlatformLinks", HTML("Available Platforms<br>(More Information)"), "PlatformInfoButton", size = "small",
uiOutput("PlatformLinks")
),
uiOutput("test"),
uiOutput("test2"),
div(style = "position: relative; top: -20px", HTML("<hr style = \"background-color: black; height:3px;\">")),
bsAlert("alert"),
conditionalPanel(condition="$('html').hasClass('shiny-busy')",
div(style = "position:center; width:100%; height:100; text-align:center",
img(src="PleaseWait.gif", style = "width:50%")
)
)
), # end navbarPage header
library(shiny)
tabPanel()
tabPanel("home")
helpText("hi")
devtools::create("shinyintro")
devtools::create("shinyintro")
getwd
getwd()
devtools::create("shinyintro")
setwd("/Users/jasminedumas/Desktop")
devtools::create("shinyintro")
library("htmlwidgets", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
rm(list=ls())
htmlwidgets::scaffoldWidget("shinyintro")
getwd()
getwd()\
getwd()
palette()
palette()
install.packages("fitbitScraper")
library(fitbitScraper)
source('~/Desktop/R-directory/fitbitScraper-tutorial.R', echo=TRUE)
source('~/Desktop/R-directory/fitbitScraper-tutorial.R', echo=TRUE)
source('~/Desktop/R-directory/fitbitScraper-tutorial.R', echo=TRUE)
source('~/Desktop/R-directory/fitbitScraper-tutorial.R', echo=TRUE)
View(df)
source('~/Desktop/R-directory/fitbitScraper-tutorial.R', echo=TRUE)
View(primo)
primo <- get_premium_export(cookie, what = c("ACTIVITIES", "BODY"),
start_date = "2015-09-15",
end_date = "2015-09-15")
View(primo)
getwd()
load("~/Desktop/depaul/CSC423/rdata/R/Exercises&Examples/EPAGAS.Rdata")
rm(list=ls)
rm(list=ls())
load("~/Desktop/depaul/CSC423/rdata/R/Exercises&Examples/EPAGAS.Rdata")
View(EPAGAS)
head(EPAGAS)
View(head(EPAGAS, 10))
hist(EPAGAS$MPG)
hist(EPAGAS$MPG, breaks = 15)
hist(EPAGAS$MPG, breaks = 15, xlab="Miles per gallon", main="My Histogram")
?hist()
hist(EPAGAS$MPG, breaks = 15, xlab="Miles per gallon", main="My Histogram", col = "purple")
savehistory("~/Desktop/depaul/CSC423/rdata/R/Exercises&Examples/example_1.4_epagas.Rhistory")
summary(EPAGAS$MPG)
install.pacakges("psych")
install.packages("psych")
library(psych)
describe(EPAGAS$MPG)
describe(EPAGAS$MPG)
source('~/Desktop/depaul/CSC423/rdata/R/Exercises&Examples/example_1.4_EPAGAS.R', echo=TRUE)
