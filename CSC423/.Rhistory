print(rough)
load("~/Desktop/depaul/CSC423/rdata/R/Exercises&Examples/QUASAR.Rdata")
head(QUASAR)
y = QUASAR$RFEWIDTH
x1 = QUASAR$REDSHIFT
x2 = QUASAR$LINEFLUX
x4 = QUASAR$AB1450
qu.model <- lm(y ~ x1 + x2 + x4 + I(x1*x2) + I(x1*x4) + I(x2*x4) + I(x1^2) + I(x2^2) + I(x4^2))
summary(qu.model)
runUrl('https://github.com/jasdumas/shinyGEO/archive/master.zip')
summary(qu.model)
wafer.plot
View(WAFER)
max(WAFER$TEMP)
min(WAFER$TEMP)
summary(wf_model)
temp_sq <- TEMP.x^2 # to get the second-order term
wf_model = lm(FAILTIME.y ~ TEMP.x + temp_sq)
summary(wf_model)
?corr()
?cor
cor(TEMP.x, temp_sq)
summary(WAFER$TEMP)
mean(WAFER$TEMP)
mean(WAFER$TEMP)
sd(WAFER$TEMP)
?apply
coded.val = apply(WAFER$TEMP, (-mean(WAFER$TEMP) / sd(WAFER$TEMP))
coded.val = apply(WAFER$TEMP, (-mean(WAFER$TEMP) / sd(WAFER$TEMP)))
coded.val = apply(WAFER$TEMP, FUN = (-mean(WAFER$TEMP) / sd(WAFER$TEMP)))
coded.val = lapply(WAFER$TEMP, FUN = (-mean(WAFER$TEMP) / sd(WAFER$TEMP)))
coded <- function(x){
(x - mean(WAFER$TEMP)) / sd(WAFER$TEMP)
}
coded(5)
5 - 146.1818
(5 - 146.1818) / 12.97116
coded.val = lapply(WAFER$TEMP, coded)
View(coded.val)
WAFER$TEMPCODED <- coded.val
View(WAFER)
?lm
wf_model_coded = lm(FAILTIME ~ TEMPCODED + I(TEMPCODED^2), data = WAFER)
summary(wf_model_coded)
wf_model_coded = lm(FAILTIME ~ TEMPCODED + I(WAFER$TEMPCODED^2), data = WAFER)
WAFER$TEMPCODEDsq <- WAFER$TEMPCODED^2
tcsq <- coded.val^2
class(WAFER$TEMPCODED)
WAFER$TEMPCODED <- as.numeric(coded.val)
class(WAFER$TEMPCODED)
WAFER$TEMPCODEDsq <- coded.val^2
3^4
WAFER$TEMPCODEDsq <- (WAFER$TEMPCODED)^2
View(WAFER)
1.45^2
wf_model_coded = lm(FAILTIME ~ TEMPCODED + TEMPCODEDsq, data = WAFER)
summary(wf_model_coded)
cor(WAFER$TEMPCODED, WAFER$TEMPCODEDsq)
load("~/Desktop/depaul/CSC423/rdata/R/Exercises&Examples/LASERS.Rdata")
head(LASERS)
View(LASERS)
coded.laser <- function(x){
(x - mean(LASERS$WAVEGUIDE)) / sd(LASERS$WAVEGUIDE)
}
# lapply the function over the waveguide variable
coded.laser.sharks = lapply(LASERS$WAVEGUIDE, coded.laser)
print(coded.laser.sharks)
LASERS$waveguide.sq = as.numeric(coded.laser.sharks^2)
LASERS$waveguide.sq = as.numeric(coded.laser.sharks)
View(LASERS)
LASERS$waveguide.sq = (LASERS$waveguide.sq)^2
cor(LASERS$WAVEGUIDE, LASERS$waveguide.sq)
LASERS$WAVEGUIDESQ = (LASERS$WAVEGUIDE)^2
cor(LASERS$WAVEGUIDE, LASERS$WAVEGUIDESQ)
View(LASERS)
LASERS$waveguide.coded = as.numeric(coded.laser.sharks)
LASERS$waveguide.coded.sq = (LASERS$waveguide.sq)^2
cor(LASERS$WAVEGUIDE, LASERS$waveguide.sq)
View(LASERS)
View(LASERS)
solar.model <- lm(CURRENT ~ waveguide.coded + waveguide.coded.sq, data = LASERS)
summary(solar.model)
paste(dataset, "$", x, sep="")
View(LASERS)
paste(LASERS, "$", WAVEGUIDE, sep="")
paste(LASERS, "$", "WAVEGUIDE", sep="")
View(LASERS$WAVEGUIDE)
View(LASERS)
source('~/Desktop/R-directory/coded.u.R', echo=TRUE)
coded.u(WAVEGUIDE, LASERS)
View(LASERS)
?paste0
dataset = "Hello"
trial = "column"
x
load("~/Desktop/depaul/CSC423/rdata/R/Exercises&Examples/LASERS.Rdata")
coded.laser <- function(x){
(x - mean(LASERS$WAVEGUIDE)) / sd(LASERS$WAVEGUIDE)
}
coded.laser.sharks = lapply(LASERS$WAVEGUIDE, coded.laser)
print(coded.laser.sharks)
LASERS$WAVEGUIDESQ = (LASERS$WAVEGUIDE)^2
cor(LASERS$WAVEGUIDE, LASERS$WAVEGUIDESQ)
LASERS$waveguide.coded = as.numeric(coded.laser.sharks)
LASERS$waveguide.coded.sq = (LASERS$waveguide.sq)^2
LASERS$waveguide.coded.sq = (LASERS$waveguide.coded)^2
cor(LASERS$WAVEGUIDE, LASERS$waveguide.sq)
cor(LASERS$WAVEGUIDE, LASERS$waveguide.coded.sq)
summary(solar.model)
load("~/Desktop/depaul/CSC423/rdata/R/Exercises&Examples/SYNFUELS.Rdata")
View(SYNFUELS)
names(SYNFUELS)
View(SYNFUELS)
power = SYNFUELS$BrakePow # x1
fuel = SYNFUELS$FuelType # x2 and x3
burn = SYNFUELS$BurnRate # y
diesel <- lm(burn ~ power + fuel + fuel + I(power*fuel))
summary(diesel)
diesel <- lm(burn ~ power + fuel + fuel + I(power*fuel) + I(power*fuel))
diesel <- lm(burn ~ power + fuel + fuel + I12 + I13)
I12 = power*fuel # x1*x2
power = SYNFUELS$BrakePow # x1
x2 =  SYNFUELS$X1 # x2
x3 = SYNFUELS$X2 # x3
burn = SYNFUELS$BurnRate # y
diesel <- lm(burn ~ power + x2 + x3 + I(power*x2) + I(power*x3))
summary(diesel)
YvX1 <- ggplot(SYNFUELS, aes(y = BurnRate, x = BrakePow)) + geom_line() + geom_abline()
library(ggplot2)
YvX1 <- ggplot(SYNFUELS, aes(y = BurnRate, x = BrakePow)) + geom_line() + geom_abline()
YvX1
multiplot(YvX1, YvX2, YvX3)
YvX2 <- ggplot(SYNFUELS, aes(y = BurnRate, x = X1)) + geom_line() + geom_abline()
YvX3 <- ggplot(SYNFUELS, aes(y = BurnRate, x = X2)) + geom_line() + geom_abline()
multiplot(YvX1, YvX2, YvX3)
multiplot(YvX1, YvX2, YvX3)
interaction.plot(ToothGrowth$dose, ToothGrowth$supp, ToothGrowth$len)
?interaction.plot
interaction.plot(power, x2, x3, burn)
interaction.plot(power, x2, x3, response = burn)
interaction.plot(power, x2, x3, response = burn, fun = mean)
interaction.plot(power, x2, response = burn)
interaction.plot(power, x1, response = burn)
interaction.plot(power, x1, response = burn)
View(SYNFUELS)
interaction.plot(power, x3, response = burn)
power = SYNFUELS$BrakePow # x1
interaction.plot(power, x2, response = burn, col = "blue")
interaction.plot(power, x3, response = burn, col = "green")
interaction.plot(power, x3, response = burn, col = "darkgreen")
interaction.plot(power, x2, response = burn, col = "blue")
(x - mean(LASERS $ WAVEGUIDE)) / sd(LASERS $ WAVEGUIDE)
numlist = [1, 2, 3, 4, 5]
numlist = [c(1, 2, 3, 4, 5)]
numlist = c(1, 2, 3, 4, 5)
numlist
class(numlist)
as.list(numlist)
class(numlist)
View(numlist)
numlist * 2
legnth(numlist)
length(numlist)
numlist / 2
numlist * 3
devtools::install_github('rich-iannone/DiagrammeR')
library(DiagrammeR)
?grViz()
the_nodes <- create_nodes(nodes = c("a", "b", "c"),
label = TRUE)
the_edges <- create_edges(from = c("a", "a"),
to   = c("b", "c"))
the_nodes
the_edges
the_graph <- create_graph(nodes_df = the_nodes,
edges_df = the_edges)
the_graph
render_graph(graph = the_graph, output = "graph")
render_graph(graph = the_graph, output = "visNetwork")
library(ggplot2)
library(twitteR)  # install_github("geoffjentry/twitteR")
library(streamR)
library(igraph)
library(XML)
library(tm)
library(stringr)
library(plyr)
library(RCurl)
library(maps)
library(SnowballC)
library(Rstem)
library(httr)
library(ROAuth)
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumerKey <- "hJSiwykPdffrpW1gbZ1xL1lF0"
consumerSecret <- "3t0PQpJ1hX224u8Kqpaju75oPTCXMuL2vkA7rjkJB9fd5mv7w0"
twitCred <- setup_twitter_oauth(consumer_key=consumerKey,
consumer_secret=consumerSecret)
load("twitCred")
setup_twitter_oauth(twitCred)
## getting data for seed user/ find out how many people a user is following
seed <- getUser("jasdumas")
seed.n <- seed$screenName
following <- seed$getFriends() # I've got 685 people I'm following
following
searchTwitter("#Fall")
load("~/Desktop/depaul/CSC423/rdata/R/Exercises&Examples/FLAG2.Rdata")
View(head(FLAG2))
names(FLAG2)
?step
library(MASS)
full.model <- lm(LOWBID ~ DOTEST + LBERATIO + STATUS + DISTRICT + NUMBIDS + DAYSEST + RDLNGTH + PCTASPH + PCTBASE + PCTEXCAV + PCTMOBIL + PCTSTRUC + PCTTRAFF + SUBCONT, data = FLAG2)
model <- step(full.model, direction="both")
summary(model)
road.model <- lm(LOWBID ~ DOTEST + LBERATIO + STATUS + DISTRICT + NUMBIDS + DAYSEST + RDLNGTH + PCTASPH + PCTBASE + PCTEXCAV + PCTMOBIL + PCTSTRUC + PCTTRAFF + SUBCONT, data = FLAG2)
road.model <- step(full.model, direction="both")
summary(road.model)
rm(lsit=ls())
rm(list =ls())
load("~/Desktop/depaul/CSC423/rdata/R/Exercises&Examples/FLAG2.Rdata")
head(FLAG2)
library(MASS)
full.road.model <- lm(LOWBID ~ DOTEST + LBERATIO + STATUS + DISTRICT + NUMBIDS + DAYSEST + RDLNGTH + PCTASPH + PCTBASE + PCTEXCAV + PCTMOBIL + PCTSTRUC + PCTTRAFF + SUBCONT, data = FLAG2)
road.model <- step(full.road.model, direction="both")
summary(road.model)
road.model <- step(full.road.model, direction="both")
data <- na.omit(FLAG2)
road.model <- step(full.road.model, direction="both")
FLAG2 <- na.omit(FLAG2)
summary(road.model)
full.road.model <- lm(LOWBID ~ DOTEST + LBERATIO + STATUS + DISTRICT + NUMBIDS + DAYSEST + RDLNGTH + PCTASPH + PCTBASE + PCTEXCAV + PCTMOBIL + PCTSTRUC + PCTTRAFF + SUBCONT, data = FLAG2)
road.model <- step(full.road.model, direction="both")
summary(road.model)
-6.652e+05
install.packages("leaps")
names(FLAG2)
library(leaps)
?leaps
yvar = c("HEATRATE")
xvars = c("ENGINE","SHAFTS","RPM","CPRATIO","INLETTEMP","EXHTEMP","AIRFLOW","POWER","HEATRATE", "LHV","ISOWORK")
best.model = leaps(x = GASTURBINE[,xvars], y=GASTURBINE[,yvar], names=xvars, nbest=3, method="adjr2")
best.model$which # shows the T or F of variable inclusion in the model
apply(best.model$which, 1, which) # consise print-out of each best model
best.model$adjr2
load("~/Desktop/depaul/CSC423/rdata/R/Exercises&Examples/GASTURBINE.Rdata")
head(GASTURBINE, n=5)
tail(GASTURBINE, n=5)
# stepwise/stepwise regression
GASTURBINE <- na.omit(GASTURBINE) # step() requires removal of missing data before if any
full.gas.model <- lm(HEATRATE ~ ENGINE + SHAFTS + RPM + CPRATIO + INLETTEMP + EXHTEMP + AIRFLOW + POWER + LHV + ISOWORK,  data = GASTURBINE)
gas.model <- step(full.gas.model, direction="both")
summary(gas.model)
load("~/Desktop/depaul/CSC423/rdata/R/Exercises&Examples/GASTURBINE.Rdata")
colnames(GASTURBINE)
head(GASTURBINE$ENGINE)
head(GASTURBINE$SHAFTS)
names(GASTURBINE)
View(names(GASTURBINE))
GASTURBINE <- na.omit(GASTURBINE) # step() requires removal of missing data before if any
full.gas.model <- lm(HEATRATE ~ ENGINE + SHAFTS + RPM + CPRATIO + INLETTEMP + EXHTEMP + AIRFLOW + POWER + LHV + ISOWORK,  data = GASTURBINE)
gas.model <- step(full.gas.model, direction="both")
summary(gas.model)
gas.model <- step(full.gas.model, direction="backward")
summary(gas.model)
library(MASS)
install.packages(c("mgcv", "packrat", "sp", "stringi"))
install.packages("Rcpp")
load("~/Desktop/depaul/CSC423/rdata/R/Exercises&Examples/GASTURBINE.Rdata")
head(GASTURBINE, n=5)
tail(GASTURBINE, n=5)
# stepwise/stepwise regression
GASTURBINE <- na.omit(GASTURBINE) # step() requires removal of missing data before if any
full.gas.model <- lm(HEATRATE ~ ENGINE + SHAFTS + RPM + CPRATIO + INLETTEMP + EXHTEMP + AIRFLOW + POWER + LHV + ISOWORK,  data = GASTURBINE)
gas.model <- step(full.gas.model, direction="both")
summary(gas.model)
levels(GASTURBINE$ENGINE)
x1 = ifelse(substr(GASTURBINE$ENGINE, 1, 2)=="Advanced   ", 1, 0)
View(x1)
x1 = ifelse(substr(GASTURBINE$ENGINE, 1, 2)=="Aeroderiv  ", 1, 0)
x1 = ifelse(substr(GASTURBINE$ENGINE, 1, 2)=="Advanced   ", 1, 0)
x2 = ifelse(substr(GASTURBINE$ENGINE, 1, 2)=="Aeroderiv  ", 1, 0)
View(x2)
summary(gas.model)
full.gas.model <- lm(HEATRATE ~ + SHAFTS + RPM + CPRATIO + INLETTEMP + EXHTEMP + AIRFLOW + POWER + LHV + ISOWORK,  data = GASTURBINE)
gas.model <- step(full.gas.model, direction="both")
summary(gas.model)
full.gas.model <- lm(HEATRATE ~ ENGINE + SHAFTS + RPM + CPRATIO + INLETTEMP + EXHTEMP + AIRFLOW + POWER + LHV + ISOWORK,  data = GASTURBINE)
gas.model <- step(full.gas.model, direction="both")
summary(gas.model)
full.gas.model <- lm(HEATRATE ~ ENGINE + SHAFTS + RPM + CPRATIO + INLETTEMP + EXHTEMP + AIRFLOW + POWER + LHV + ISOWORK,  data = GASTURBINE, x = TRUE)
gas.model <- step(full.gas.model, direction="both")
summary(gas.model)
summary(full.gas.model)
?lm()
head(full.gas.model$x)
full.gas.model$x
library(leaps)
y = c("HEATRATE")
x = c("SHAFTS","RPM","CPRATIO","INLETTEMP","EXHTEMP","AIRFLOW","POWER","HEATRATE", "LHV","ISOWORK")
best.model <- leaps(x = GASTURBINE[,x], y=GASTURBINE[,y], names=x, nbest=3, method="adjr2")
best.model$which # shows the T or F of variable inclusion in the model
apply(best.model$which, 1, which) # consise print-out of each best model
x = c("SHAFTS","RPM","CPRATIO","INLETTEMP","EXHTEMP","AIRFLOW","POWER", "LHV","ISOWORK")
best.model <- leaps(x = GASTURBINE[,x], y=GASTURBINE[,y], names=x, nbest=3, method="adjr2")
apply(best.model$which, 1, which) # consise print-out of each best model
apply(best.model, 1, which) # consise print-out of each best model
View(apply(best.model$which, 1, which))
class(apply(best.model$which, 1, which))
install.packages("Hmisc")
library(Hmisc)
?print.char.list
a <- apply(best.model$which, 1, which)
print.char.list(a)
a[1]
a[2]
a[4]
a[1]
a[1,]
a[,1]
a[[1]]
a[[[1]]]
paste("this row", a[[1]], sep=" ")
colname(a[[1]])
colnames(a[[1]])
label(a[[1]])
type(a[[1]])
class(a[[1]])
a[[1,]]
a[[,1]]
rownames(a[[1]])
apply(best.model$which, 1, which) # consise print-out of each best model
sort(table(a), decreasing = TRUE)
sort(list(a), decreasing = TRUE)
summary(a)
mode(a)
summary(gas.model)
library(devtools)
devtools::install_github("rstudio/rmarkdown")
library(rmarkdown)
pandoc('chp6-7-HW-jasmine_dumas.Rmd', format='latex')
library(knitr) # global settings
pandoc('chp6-7-HW-jasmine_dumas.Rmd', format='latex')
install.pandoc()
install.packages(c("class", "foreign", "MASS", "mgcv", "nlme", "nnet", "sp", "spatial"))
library(knitr)
?pandoc()
pandoc('chp6-7-HW-jasmine_dumas.Rmd', format='latex')
data <- read.table.url("http://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data")
data <- read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data")
View(data)
data <- read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data", header = FALSE, sep = ",")
View(data)
class(data)
names(data)
colnames(data)
colnames(data) <- c("Sample_code_number", "Clump_Thickness", "Cell_Size", "Cell_Shape", "Marginal_Adhesion", "Single_Epithelial_Cell_Size", "Bare_Nuclei", "Bland_Chromatin", "Normal_Nucleoli", "Mitoses", "Class" )
head(data)
?read.table()
is.na(data)
data <- read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data", header = FALSE, sep = ",", na.strings="?")
head(data)
View(data)
colnames(data) <- c("Sample_code_number", "Clump_Thickness", "Cell_Size", "Cell_Shape", "Marginal_Adhesion", "Single_Epithelial_Cell_Size", "Bare_Nuclei", "Bland_Chromatin", "Normal_Nucleoli", "Mitoses", "Class" )
head(data)
data <- na.omit(data) # required by some regression techniques
summary(data)
source('~/Desktop/depaul/CSC423/multiplot.R', echo=TRUE)
head(data)
cor(data$Clump_Thickness. data$Cell_Size)
cor(data$Clump_Thickness, data$Cell_Size)
plot1 <- ggplot(data, aes(y = Class, x = Clump_Thickness)) + geom_point()
library(ggplot2)
plot1 <- ggplot(data, aes(y = Class, x = Clump_Thickness)) + geom_point()
plot1
View(data)
data.model <- lm(Class ~ Clump_Thickness, data=data)
summary(data.model)
1.625308 + 0.241897*5
1.625308 + 0.241897*8
1.625308 + 0.241897*10
1.625308 + 0.241897*1
1.625308 + 0.241897*6
predict(steer.model, newdata=data.frame(DRESSWT = 300), interval="prediction", level=0.95)
load("~/Desktop/depaul/CSC423/rdata/R/Exercises&Examples/STEERS.Rdata")
head(STEERS)
DRESSWT = STEERS$DRESSWT
LIVEWT = STEERS$LIVEWT
steer.model <- lm(DRESSWT ~ LIVEWT, data=STEERS)
summary(steer.model)
predict(steer.model, newdata=data.frame(DRESSWT = 300), interval="prediction", level=0.95)
beer = read.table("http://www.craftbeeranalytics.com/uploads/3/3/8/9/3389428/ratebeer_beerjobber.txt", header=TRUE, sep="")
Vewi(beer)
View(beer)
unique(beer$brewer)
unique(beer$style)
cor(beer$abv, beer$ratings)
cor(beer$abv, beer$score.overall)
beer <- na.omit(beer)
View(bber)
View(beer)
cor(beer$abv, beer$score.overall)
cor(beer$ratings, beer$score.overall)
cor(beer$score.by.style, beer$score.overall)
cor(beer$style, beer$score.overall)
beer.model = lm(score.overall ~ abv + ratings + score.by.style + brewer, data=beer)
summary(beer.model)
beer.model = lm(score.overall ~ abv + ratings + score.by.style, data=beer)
summary(beer.model)
cor(beer$abv, beer$ratings)
cor(beer$abv, beer$score.by.style)
cor(beer$ratings, beer$score.by.style)
full.beer = step(beer.model, direction="both")
beer.model = lm(score.overall ~ abv + ratings + score.by.style, data=beer) # low F-statistic
full.beer = step(beer.model, direction="both")
beer.model = lm(score.overall ~ abv + ratings + score.by.style + brewer, data=beer) # low F-statistic
full.beer = step(beer.model, direction="both")
summary(full.beer)
beer.model3 = lm(score.overall ~ abv + ratings + score.by.style + style, data=beer)
summary(beer.model3)
full.beer = step(beer.model3, direction="both")
full.beer = step(beer.model3, direction="backward")
ggplot(beer, aes(y = score.overall, x = abv)) + geom_point()
library(ggplot2)
ggplot(beer, aes(y = score.overall, x = abv)) + geom_point()
ggplot(beer, aes(y = score.overall, x = ratings)) + geom_point()
ggplot(beer, aes(y = score.overall, x = score.by.style)) + geom_point()
log.abv = log(beer$abv)
ggplot(beer, aes(y = score.overall, x = log.abv)) + geom_point() # log?
inv.abv = 1/(beer$abv)
ggplot(beer, aes(y = score.overall, x = inv.abv)) + geom_point() # log?
View(beer)
colnames(beer)
library(rvest)
url <- html("ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE13nnn/GSE13507/matrix/7")
url <- read_html("ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE13nnn/GSE13507/matrix/7")
url <- read_html("ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSEnnn/GSE13/matrix/")
url %>%
html_node("td.detailsColumn") %>%
html_text() %>%
as.character()
url %>%
html_node("td") %>%
html_text() %>%
as.character()
View(url)
url
url
url
read.table("ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSEnnn/GSE13/matrix/")
read.table("ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSEnnn/GSE13/matrix/")
read.table("ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSEnnn/GSE13/matrix/", header=f)
scan(""ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSEnnn/GSE13/matrix/"")
scan("ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSEnnn/GSE13/matrix/")
readLines("ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSEnnn/GSE13/matrix/")
url("ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSEnnn/GSE13/matrix/")
a = url("ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSEnnn/GSE13/matrix/")
readLines(a)
?readLines
readLines(a, n=10)
scan(a)
read.table(a)
cor(beer$abv, beer$score.overall)
cor(beer$score.overall, beer$score.by.style)
cor(beer$ratings, beer$score.overall)
load("~/Desktop/depaul/CSC423/BQAPPLE.Rdata")
head(BQAPPLE)
plot(BQAPPLE$APPLE, BQAPPLE$INCOME)
BQAPPLE = BQAPPLE[order(BQAPPLE$INCOME)]
BQAPPLE = BQAPPLE[order(BQAPPLE$INCOME),]
options(scipen=3)
plot(APPLE ~ INCOME, data=BQAPPLE, lwd=2)
plot( BQAPPLE$INCOME, BQAPPLE$APPLE)
plot(APPLE ~ INCOME, data=BQAPPLE, lwd=2)
plot( BQAPPLE$INCOME, BQAPPLE$APPLE)
install.packages("ROCR")
library(ROCR)
?read.table
filepath = "/Users/jasminedumas/Documents/extra-spcombo.txt"
text <- read.table(filepath, header = F, sep =" ", stringsAsFactors = F)
head(text)
junk <- read.table(filepath, header = F, sep =" ", stringsAsFactors = F)
junk <- read.table(filepath, header = F, sep =" ", stringsAsFactors = F, fill = T)
head(junk)
colnames(junk)
View(junk)
class(junk$V5)
junk <- read.table(filepath, header = F, sep =" ", stringsAsFactors = F, fill = T, skipNul = T)
View(junk)
junk[!(is.na(junk$V5 =="")),]
View(junk)
new_junk = junk[!(is.na(junk$V5 =="")),]
View(new_junk)
new_junk = junk[!(is.na(junk$V5) | junk$V5 =="")),]
new_junk = junk[!(is.na(junk$V5) | junk$V5 ==""),]
View(new_junk)
Print(new_junk$V9)
print(new_junk$V9)
print(as.factor(new_junk$V9))
View(as.factor(new_junk$V9))
write.csv2(as.factor(new_junk$V9))
filepath = "/Users/jasminedumas/Documents/extra-spcombo.txt"
junk <- read.table(filepath, header = F, sep =" ", stringsAsFactors = F, fill = T, skipNul = T)
head(junk)
new_junk = junk[!(is.na(junk$V5) | junk$V5 ==""),]
View(new_junk)
print(as.factor(new_junk$V9))
write.csv2(as.factor(new_junk$V9))
setwd("/Users/jasminedumas/Desktop/depaul/CSC423")
brain <- read.table("braindata.txt", header = TRUE, sep = "", na.strings="¥")
View(brain)
